<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace对应mapper接口的全类型 -->
<mapper namespace="com.ren.mybatis.mapper.EmpMapper">
    <!-- sql语句填写区 例：<select id="mapper接口中的方法" resultType="数据类型全类名/别名">sql语句</select>-->

    <!--
      字段名和属性名不一致的情况，如何处理映射关系
      1，为查询的字段设置别名，和属性名保持一致
      2，当字段符合MySql的要求使用_，而属性符合java的要求使用驼峰
         此时可以在MyBatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰
      3，使用resultMap自定义映射处理
      处理多对一的映射关系
      1，级联方式处理
      2，association
      3，分布查询

      处理一对多的映射关系：
      1，collection
      2，分步查询
    -->

    <!--
      resultMap：设置自定义的映射关系
      id：唯一标识
      type：处理映射关系的实体类的类型
      常用的标签
      id：处理主键和实体类中属性的映射关系
      result：处理普通字段和实体类中属性的映射关系
      association：处理多对一的映射关系（处理实体类类型的属性）
      collection：处理一对多的映射关系（处理集合类型的属性）
      column：设置映射关系中的字段名，必须是sql查询出的的某个字段
      property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名
    -->

    <resultMap id="empResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!-- Emp getEmpByEmpId(@Param("empId") Integer empId); -->
    <select id="getEmpByEmpId" resultMap="empResultMap">
        SELECT emp_id, emp_name, age, gender
        FROM t_emp
        WHERE emp_id = #{empId};
    </select>

    <select id="getEmpByEmpIdOld" resultType="Emp">
        <!-- SELECT emp_id AS empId, emp_name AS empName, age, gender FROM t_emp WHERE emp_id = #{empId} -->
        SELECT emp_id, emp_name, age, gender FROM t_emp WHERE emp_id=#{empId}
    </select>

    <!-- 一 级联处理的多对一映射关系 -->
    <resultMap id="empAndDeptResultMapOne" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="dept_id" property="dept.deptId"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>

    <!-- Emp getEmpAndDeptByEmpId(@Param("empId") Integer empId); -->
    <select id="getEmpAndDeptByEmpIdOne" resultMap="empAndDeptResultMapOne">
        SELECT emp_id, emp_name, age, gender, t_emp.dept_id, t_dept.dept_id, dept_name
        FROM t_emp
                 LEFT JOIN t_dept ON t_emp.dept_id = t_dept.dept_id
        WHERE emp_id = #{empId}
    </select>

    <!-- 二 使用association处理多对一映射关系 -->
    <resultMap id="empAndDeptResultMapTwo" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
          association：处理多对一的映射关系（处理实体类类型的属性）
          property：设置需要处理映射关系的属性的属性名
          javaType：设置要处理的属性的类型
        -->
        <association property="dept" javaType="Dept">
            <id column="dept_id" property="deptId"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <!-- Emp getEmpAndDeptByEmpId(@Param("empId") Integer empId); -->
    <select id="getEmpAndDeptByEmpId" resultMap="empAndDeptResultMapTwo">
        SELECT emp_id, emp_name, age, gender, t_emp.dept_id, t_dept.dept_id, dept_name
        FROM t_emp
                 LEFT JOIN t_dept ON t_emp.dept_id = t_dept.dept_id
        WHERE emp_id = #{empId}
    </select>

    <!-- 三 使用分布查询处理多对一映射关系 -->
    <resultMap id="empAndDeptByStepResultMapThr" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
          property：设置需要处理映射关系的属性的属性名
          select：设置分布查询的sql的唯一标识（唯一标识：该sql所在mapperXml的namespace加上该sql的id）
          column：将查询出的某个字段作为分布查询的sql的条件 下一个sql语句查询的条件
          fetchType：在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加载
             fetchType="eager(立即加载)/lazy(延迟加载)"
        -->
        <association property="dept" fetchType="eager"
                     select="com.ren.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="dept_id">
        </association>
    </resultMap>

    <!-- Emp getEmpAndDeptByStep(@Param("empId") Integer empId); -->
    <select id="getEmpAndDeptByStep" resultMap="empAndDeptByStepResultMapThr">
        SELECT emp_id, emp_name, age, gender, dept_id
        FROM t_emp
        WHERE emp_id = #{empId}
    </select>

    <!-- List<Emp> getEmpListByDeptId(@Param("deptId") Integer deptId); -->
    <select id="getEmpListByDeptId" resultMap="empAndDeptByStepResultMapThr">
        SELECT emp_id, emp_name, age, gender
        FROM t_emp
        WHERE dept_id = #{deptId}
    </select>
</mapper>
